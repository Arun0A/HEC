/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */

// 16384 - 0100 0000 0000 0000
// 24576 - 0110 0000 0000 0000

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	And(a=address[14], b=address[13], out=kbd)
    Not(in=kbd, out=notkbd)
    And(a=address[14], b=notkbd, out=scr)
    Not(in=scr, out=notscr)

    And(a=load, b=notscr, out=l1)
    And(a=load, b=scr, out=l2)

    RAM16K(in=in, address=address[0..13], load=l1, out=w1);
    Screen(in=in, address=address[0..12], load=l2, out=w2);
    Keyboard(out=w3);

    Mux16(a=w1, b=w2, sel=scr, out=t1);
    Mux16(a=t1, b=w3, sel=kbd, out=out);

}